{
  "openapi": "3.0.3",
  "info": {
    "title": "CrossAudit AI Governance Gateway API",
    "description": "REST API for CrossAudit AI governance, policy enforcement, and audit logging",
    "version": "1.0.0",
    "contact": {
      "name": "CrossAudit Support",
      "email": "support@crossaudit.ai",
      "url": "https://crossaudit.ai"
    },
    "license": {
      "name": "Commercial",
      "url": "https://crossaudit.ai/license"
    }
  },
  "servers": [
    {
      "url": "https://api.crossaudit.ai",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.crossaudit.ai", 
      "description": "Staging server"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/gateway/evaluate": {
      "post": {
        "summary": "Evaluate LLM Request",
        "description": "Send an LLM request through CrossAudit for policy evaluation and enforcement",
        "operationId": "evaluateLLMRequest",
        "tags": ["Gateway"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful evaluation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/documents/process": {
      "post": {
        "summary": "Process Document",
        "description": "Upload and process a document for context augmentation",
        "operationId": "processDocument",
        "tags": ["Documents"],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Document file to process"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "JSON-encoded metadata"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Document Processing Info",
        "description": "Get information about supported document formats and processing capabilities",
        "operationId": "getDocumentInfo",
        "tags": ["Documents"],
        "responses": {
          "200": {
            "description": "Document processing information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supportedMimeTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "maxFileSize": {
                      "type": "string"
                    },
                    "features": {
                      "type": "object",
                      "properties": {
                        "ocr": {
                          "type": "boolean"
                        },
                        "textExtraction": {
                          "type": "boolean"
                        },
                        "metadataExtraction": {
                          "type": "boolean"
                        },
                        "chunking": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audit/logs": {
      "get": {
        "summary": "Get Audit Logs",
        "description": "Retrieve audit logs for the organization",
        "operationId": "getAuditLogs",
        "tags": ["Audit"],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date filter (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date", 
            "in": "query",
            "description": "End date filter (ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of logs to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuditLog"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/policies/test": {
      "post": {
        "summary": "Test Policy",
        "description": "Test a prompt/response pair against current policies",
        "operationId": "testPolicy",
        "tags": ["Policies"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "description": "The input prompt"
                  },
                  "response": {
                    "type": "string", 
                    "description": "The AI response to test"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional test metadata"
                  }
                },
                "required": ["prompt", "response"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy test completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/rbac/roles": {
      "get": {
        "summary": "List Roles",
        "description": "Get all roles for an organization",
        "operationId": "listRoles",
        "tags": ["RBAC"],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Role",
        "description": "Create a new role",
        "operationId": "createRole",
        "tags": ["RBAC"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "role": {
                      "$ref": "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check the health status of the API",
        "operationId": "healthCheck",
        "tags": ["System"],
        "security": [],
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok", "degraded", "down"]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string"
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": ["ok", "error"]
                        },
                        "redis": {
                          "type": "string",
                          "enum": ["ok", "error"]
                        },
                        "gateway": {
                          "type": "string",
                          "enum": ["ok", "error"]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "LLMRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The input prompt for the LLM"
          },
          "model": {
            "type": "string",
            "description": "The model to use",
            "default": "gpt-3.5-turbo",
            "enum": ["gpt-4", "gpt-3.5-turbo", "claude-3", "gemini-pro"]
          },
          "provider": {
            "type": "string",
            "description": "The LLM provider",
            "default": "openai",
            "enum": ["openai", "anthropic", "google", "cohere"]
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum tokens to generate",
            "minimum": 1,
            "maximum": 4096
          },
          "temperature": {
            "type": "number",
            "description": "Temperature for response generation",
            "minimum": 0,
            "maximum": 2,
            "default": 0.7
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the request"
          }
        },
        "required": ["prompt"]
      },
      "LLMResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The generated content"
          },
          "model": {
            "type": "string",
            "description": "The model used"
          },
          "provider": {
            "type": "string",
            "description": "The provider used"
          },
          "tokens": {
            "type": "integer",
            "description": "Number of tokens in the response"
          },
          "evaluation": {
            "$ref": "#/components/schemas/EvaluationResult"
          },
          "cached": {
            "type": "boolean",
            "description": "Whether the response was cached"
          },
          "metadata": {
            "type": "object",
            "description": "Additional response metadata"
          }
        },
        "required": ["content", "model", "provider", "tokens", "evaluation"]
      },
      "EvaluationResult": {
        "type": "object",
        "properties": {
          "evaluation_id": {
            "type": "string",
            "description": "Unique evaluation identifier"
          },
          "score": {
            "type": "number",
            "description": "Overall safety/quality score (0-1)",
            "minimum": 0,
            "maximum": 1
          },
          "action": {
            "type": "string",
            "description": "Recommended action",
            "enum": ["PASS", "BLOCK", "REWRITE", "FLAG"]
          },
          "violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyViolation"
            }
          },
          "processing_time": {
            "type": "integer",
            "description": "Processing time in milliseconds"
          },
          "rewritten_content": {
            "type": "string",
            "description": "Rewritten content if action is REWRITE"
          },
          "metadata": {
            "type": "object",
            "description": "Additional evaluation metadata"
          }
        },
        "required": ["evaluation_id", "score", "action", "violations", "processing_time"]
      },
      "PolicyViolation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of violation"
          },
          "severity": {
            "type": "string",
            "description": "Violation severity",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
          },
          "message": {
            "type": "string",
            "description": "Human-readable violation message"
          },
          "confidence": {
            "type": "number",
            "description": "Confidence in the violation detection (0-1)",
            "minimum": 0,
            "maximum": 1
          },
          "location": {
            "type": "object",
            "description": "Location of the violation in the content",
            "properties": {
              "start": {
                "type": "integer"
              },
              "end": {
                "type": "integer"
              },
              "line": {
                "type": "integer"
              }
            }
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Suggested remediation actions"
          },
          "evidence": {
            "type": "string",
            "description": "Evidence supporting the violation"
          }
        },
        "required": ["type", "severity", "message", "confidence"]
      },
      "DocumentUploadResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "document": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string"
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "pages": {
                    "type": "integer"
                  }
                }
              },
              "chunks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              },
              "processingTime": {
                "type": "integer"
              }
            }
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique log identifier"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the action occurred"
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user who performed the action"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization ID"
          },
          "action": {
            "type": "string",
            "description": "The action that was performed"
          },
          "resource": {
            "type": "string",
            "description": "The resource that was acted upon"
          },
          "details": {
            "type": "object",
            "description": "Additional details about the action"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address of the client"
          },
          "user_agent": {
            "type": "string",
            "description": "User agent string"
          }
        },
        "required": ["id", "timestamp", "user_id", "organization_id", "action", "resource"]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizationId": {
            "type": "string"
          },
          "isSystemRole": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateRoleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizationId": {
            "type": "string"
          }
        },
        "required": ["name", "organizationId"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          }
        },
        "required": ["error"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RateLimited": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Gateway",
      "description": "AI Gateway operations for LLM requests"
    },
    {
      "name": "Documents", 
      "description": "Document processing and management"
    },
    {
      "name": "Audit",
      "description": "Audit logging and compliance"
    },
    {
      "name": "Policies",
      "description": "Policy management and testing"
    },
    {
      "name": "RBAC",
      "description": "Role-based access control"
    },
    {
      "name": "System",
      "description": "System health and monitoring"
    }
  ]
}